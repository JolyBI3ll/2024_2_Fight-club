openapi: 3.0.0
info:
  title: Путник API
  version: 1.0.0
  description: API для сервиса каучсерфинга "Путник".
servers:
  - url: http://localhost:8008
    description: Локальный сервер

paths:
  /api/auth/register:
    post:
      summary: Регистрация нового пользователя
      tags:
        - Аутентификация
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        '201':
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserResponse'
        '400':
          description: Некорректные данные запроса
        '409':
          description: Пользователь уже существует

  /api/auth/login:
    post:
      summary: Вход пользователя
      tags:
        - Аутентификация
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserResponse'
        '400':
          description: Некорректные данные запроса
        '401':
          description: Неверные учетные данные

  /api/auth/logout:
    delete:
      summary: Выход пользователя
      tags:
        - Аутентификация
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешный выход
        '401':
          description: Неавторизованный доступ

  /api/users/{userId}:
    put:
      summary: Обновление данных пользователя
      tags:
        - Управление пользователями
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: Идентификатор пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: Данные пользователя обновлены
        '400':
          description: Некорректные данные запроса
        '404':
          description: Пользователь не найден
        '401':
          description: Неавторизованный доступ

    get:
      summary: Получение пользователя по ID
      tags:
        - Управление пользователями
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: Идентификатор пользователя
      responses:
        '200':
          description: Данные пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Пользователь не найден
        '401':
          description: Неавторизованный доступ

  /api/users:
    get:
      summary: Получение всех пользователей
      tags:
        - Управление пользователями
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Неавторизованный доступ

  /api/session:
    get:
      summary: Получение данных сессии
      tags:
        - Аутентификация
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Данные сессии
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '401':
          description: Неавторизованный доступ

  /api/users/{userId}/ads:
    get:
      summary: Получение объявлений пользователя
      tags:
        - Управление объявлениями
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: Идентификатор пользователя
      responses:
        '200':
          description: Список объявлений пользователя
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllAdsResponse'
        '404':
          description: Пользователь не найден
        '401':
          description: Неавторизованный доступ

  /api/ads:
    get:
      summary: Получение всех объявлений
      tags:
        - Управление объявлениями
      parameters:
        - in: query
          name: location
          schema:
            type: string
            enum: ["1km", "3km", "5km", "10km"]
          description: "Фильтрация по расстоянию от текущего  местоположения"
        - in: query
          name: rating
          schema:
            type: string
          description: "Фильтрация по минимальному рейтингу   автора"
        - in: query
          name: new
          schema:
            type: string
            enum: ["true", "false"]
          description: "Фильтрация для объявлений, добавленных на   этой неделе"
        - in: query
          name: gender
          schema:
            type: string
            enum: ["male", "female"]
          description: "Фильтрация по полу автора"
        - in: query
          name: guests
          schema:
            type: string
            enum: ["5", "10", "20", "50"]
          description: "Фильтрация по количеству гостей"
      responses:
        '200':
          description: Список всех объявлений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllAdsResponse'


    post:
      summary: Создание нового объявления
      tags:
        - Управление объявлениями
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAdRequest'
      responses:
        '201':
          description: Объявление создано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ad'
        '400':
          description: Некорректные данные запроса
        '401':
          description: Неавторизованный доступ

  /api/ads/{adId}:
    get:
      summary: Получение объявления по ID
      tags:
        - Управление объявлениями
      parameters:
        - name: adId
          in: path
          required: true
          schema:
            type: string
          description: Идентификатор объявления
      responses:
        '200':
          description: Данные объявления
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllAdsResponse'
        '404':
          description: Объявление не найдено

    put:
      summary: Обновление объявления по ID
      tags:
        - Управление объявлениями
      security:
        - bearerAuth: []
      parameters:
        - name: adId
          in: path
          required: true
          schema:
            type: string
          description: Идентификатор объявления
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAdRequest'
      responses:
        '200':
          description: Объявление обновлено
        '400':
          description: Некорректные данные запроса
        '404':
          description: Объявление не найдено
        '401':
          description: Неавторизованный доступ

    delete:
      summary: Удаление объявления по ID
      tags:
        - Управление объявлениями
      security:
        - bearerAuth: []
      parameters:
        - name: adId
          in: path
          required: true
          schema:
            type: string
          description: Идентификатор объявления
      responses:
        '200':
          description: Объявление удалено
        '404':
          description: Объявление не найдено
        '401':
          description: Неавторизованный доступ

  /api/ads/cities/{city}:
    get:
      summary: Получение объявлений по городу
      tags:
        - Управление объявлениями
      parameters:
        - name: city
          in: path
          required: true
          schema:
            type: string
          description: Название города
      responses:
        '200':
          description: Список объявлений в указанном городе
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllAdsResponse'
        '404':
          description: Город не найден

  /api/csrf/refresh:
    get:
      summary: Обновление CSRF токена
      tags:
        - Безопасность
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Новый CSRF токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CsrfToken'
        '401':
          description: Неавторизованный доступ

  /api/cities:
    get:
      summary: Получение списка всех городов
      tags:
        - Управление городами
      responses:
        '200':
          description: Список городов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterUser:
      type: object
      required:
        - username
        - password
        - email
        - name
      properties:
        username:
          type: string
          example: johndoe
        password:
          type: string
          format: password
          example: strongpassword123
        email:
          type: string
          format: email
          example: johndoe@example.com
        name:
          type: string
          example: johndoe

    RegisterUserResponse:
      type: object
      properties:
        session_id:
          type: string
          description: "Идентификатор сессии пользователя"
          example: sQV/MsfWRQNbbouI71ZKowiZWJg9FoJ5YbqPjQGoNOU=
        user:
          type: object
          properties:
            email:
              type: string
              format: email
              description: "Электронная почта пользователя"
            id:
              type: string
              format: uuid
              description: "Уникальный идентификатор пользователя"
            username:
              type: string
              description: "Имя пользователя"
              example: johndoe

    LoginUser:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: johndoe
        password:
          type: string
          format: password
          example: strongpassword123
    UpdateUser:
      type: object
      properties:
        username:
          type: string
          description: "Имя пользователя"
          example: "johndoe"
        email:
          type: string
          format: email
          description: "Электронная почта пользователя"
          example: "johndoe@example.com"
        name:
          type: string
          description: "Настоящее имя пользователя"
          example: "John Doe"
        score:
          type: number
          format: float
          description: "Рейтинг пользователя"
          example: 4.5
        avatar:
          type: string
          description: "URL аватара пользователя"
          example: "images/default.png"
        sex:
          type: string
          description: "Пол пользователя, обозначается одной буквой (М/Ж)"
          example: "M"
        guestCount:
          type: integer
          description: "Количество гостей, которых пользователь привел"
          example: 5
        birthDate:
          type: string
          format: date
          description: "Дата рождения пользователя"
          example: "1990-01-01"
        isHost:
          type: boolean
          description: "Указывает, является ли пользователь хозяином (host)"
          example: true

    User:
      type: object
      properties:
        id:
          type: string
          example: 60d0fe4f5311236168a109ca
        username:
          type: string
          example: johndoe
        password:
          type: string
          format: password
          example: strongpassword123
        email:
          type: string
          format: email
          example: johndoe@example.com
        name:
          type: string
          example: John Doe
        score:
          type: number
          format: float
          example: 4.5
        avatar:
          type: string
          example: images/avatar1.png
        sex:
          type: string
          example: M
        guestCount:
          type: integer
          example: 3
        birthDate:
          type: string
          format: date
          example: 1990-01-01
        isHost:
          type: boolean
          example: true

    City:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Москва
        description:
          type: string
          example: Столица России, крупнейший город страны.

    Ad:
      type: object
      properties:
        places:
          type: object
          properties:
            id:
              type: string
              format: uuid
              description: "Уникальный идентификатор размещения"
            cityId:
              type: integer
              description: "Идентификатор города"
            authorUUID:
              type: string
              format: uuid
              description: "Уникальный идентификатор автора"
            address:
              type: string
              description: "Адрес размещения"
            publicationDate:
              type: string
              format: date-time
              description: "Дата публикации"
            description:
              type: string
              description: "Описание размещения"
            roomsNumber:
              type: integer
              description: "Количество комнат"
            images:
              type: array
              items:
                type: string
              nullable: true
              description: "Список URL изображений для размещения"

    GetAllAdsResponse:
      type: object
      properties:
        places:
          type: object
          properties:
            id:
              type: string
              format: uuid
              description: "Уникальный идентификатор размещения"
            cityId:
              type: integer
              description: "Идентификатор города"
            authorUUID:
              type: string
              format: uuid
              description: "Уникальный идентификатор автора"
            address:
              type: string
              description: "Адрес размещения"
            publicationDate:
              type: string
              format: date-time
              description: "Дата публикации"
            description:
              type: string
              description: "Описание размещения"
            roomsNumber:
              type: integer
              description: "Количество комнат"
            authorRating:
              type: number
              format: float
              description: "Рейтинг автора"
            authorAvatar:
              type: string
              description: "Ссылка на аватар автора"
            authorName:
              type: string
              description: "Имя автора"
            cityName:
              type: string
              description: "Название города"
            images:
              type: array
              items:
                type: string
              nullable: true
              description: "Список URL изображений для размещения"

    CreateAdRequest:
      type: object
      required:
        - cityName
        - address
        - description
        - roomsNumber
      properties:
        cityName:
          type: string
          example: Москва
        address:
          type: string
          example: ул. Ленина, д. 10
        description:
          type: string
          example: Отличный велосипед в отличном состоянии.
        roomsNumber:
          type: integer
          example: 3

    UpdateAdRequest:
      type: object
      properties:
        cityName:
          type: string
          example: Санкт-Петербург
        address:
          type: string
          example: ул. Пушкина, д. 20
        description:
          type: string
          example: Обновлённое описание объявления.
        roomsNumber:
          type: integer
          example: 4

    Session:
      type: object
      properties:
        id:
          type: string
          example: 60d0fe4f5311236168a109ca
        avatar:
          type: string
          example: images/avatar1.png

    CsrfToken:
      type: object
      properties:
        csrfToken:
          type: string
          example: dGhpc2lzYS1leGFtcGxlLXNlY3JldC10b2tlbg==

tags:
  - name: Аутентификация
    description: Маршруты для регистрации, входа и выхода пользователей
  - name: Управление пользователями
    description: Маршруты для управления данными пользователей
  - name: Управление объявлениями
    description: Маршруты для создания, обновления и удаления объявлений
  - name: Управление городами
    description: Маршруты для получения информации о городах
  - name: Безопасность
    description: Маршруты, связанные с безопасностью приложения