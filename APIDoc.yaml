openapi: 3.0.0
info:
  title: Путник API
  description: API для сервиса каучсерфинга "Путник"
  version: 1.0.0
servers:
  - url: https://api.putnik.example.com
    description: Основной сервер

paths:
  /api/auth/register:
    post:
      summary: Регистрация нового пользователя
      tags:
        - Аутентификация
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Некорректные данные запроса
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuthErrorResponse"
        "409":
          description: Пользователь уже существует
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ErrorResponse"

  /api/auth/login:
    post:
      summary: Авторизация пользователя
      tags:
        - Аутентификация
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Успешная авторизация
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Некорректные данные запроса
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuthErrorResponse"
        "401":
          description: Неправильные учетные данные
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ErrorResponse"


  /api/auth/logout:
    delete:
      summary: Выход из системы
      tags:
        - Аутентификация
      responses:
        "200":
          description: Успешный выход
        "401":
          description: Неавторизованный запрос
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ErrorResponse"


  /api/ads:
    get:
      summary: Получение всех объявлений
      tags:
        - Объявления
      responses:
        "200":
          description: Список всех объявлений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Ad"
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ErrorResponse"


  /api/getSessionsData:
    get:
      summary: Получение данных о сессии
      tags:
        - Сессии
      responses:
        "200":
          description: Информация о сессии
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SessionData"
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    SessionData:
      type: object
      properties:
        id:
          type: integer
          example: 2
        avatar:
          type: string
          example: /images/avatar1.jpg

    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: johndoe@example.com
        password:
          type: string
          format: password
          example: StrongPassword123

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: johndoe
        password:
          type: string
          format: password
          example: StrongPassword123

    AuthResponse:
      type: object
      properties:
        session_id:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        user:
          $ref: "#/components/schemas/User"

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: johndoe@example.com

    Ad:
      type: object
      properties:
        id:
          type: integer
          example: 101
        locationMain:
          type: string
          example: Россия, г. Москва
        locationStreet:
          type: string
          example: Малая Ботаническая ул., 10А
        position:
          type: array
          items:
            type: number
          example: [2.3213, 3.3213]
        images:
          type: array
          items:
            type: string
          example: ["images/1.jpg", "images/2.jpg", "images/3.jpg"]
        author:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: Leo D.
            score:
              type: number
              format: float
              example: 4.98
            avatar:
              type: string
              example: "" # Ссылка на аву
            sex:
              type: string
              enum: ["M", "F"]
              example: M # 0 женщина, 1 мужчина
            guestsCount:
              type: integer
              example: 50 # сколько гостей было
        publicationDate:
          type: string
          format: date
          example: "2022-05-31"
        distance:
          type: number
          format: float
          example: 1.4 # в км
        availableDates:
          type: array
          items:
            type: string
            format: date
          example: ["2024-05-01"]

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: No active session

    AuthErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: Incorect data forms
        wrongFields:
          type: array
          items:
            type: string
          example: ["password","username"]
