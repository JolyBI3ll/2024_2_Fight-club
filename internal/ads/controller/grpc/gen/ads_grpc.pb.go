// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: ads.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Ads_GetAllPlaces_FullMethodName     = "/ads.Ads/GetAllPlaces"
	Ads_GetOnePlace_FullMethodName      = "/ads.Ads/GetOnePlace"
	Ads_CreatePlace_FullMethodName      = "/ads.Ads/CreatePlace"
	Ads_UpdatePlace_FullMethodName      = "/ads.Ads/UpdatePlace"
	Ads_DeletePlace_FullMethodName      = "/ads.Ads/DeletePlace"
	Ads_GetPlacesPerCity_FullMethodName = "/ads.Ads/GetPlacesPerCity"
	Ads_GetUserPlaces_FullMethodName    = "/ads.Ads/GetUserPlaces"
	Ads_DeleteAdImage_FullMethodName    = "/ads.Ads/DeleteAdImage"
)

// AdsClient is the client API for Ads service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdsClient interface {
	GetAllPlaces(ctx context.Context, in *AdFilterRequest, opts ...grpc.CallOption) (*GetAllAdsResponseList, error)
	GetOnePlace(ctx context.Context, in *GetPlaceByIdRequest, opts ...grpc.CallOption) (*GetAllAdsResponse, error)
	CreatePlace(ctx context.Context, in *CreateAdRequest, opts ...grpc.CallOption) (*Ad, error)
	UpdatePlace(ctx context.Context, in *UpdateAdRequest, opts ...grpc.CallOption) (*AdResponse, error)
	DeletePlace(ctx context.Context, in *DeletePlaceRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetPlacesPerCity(ctx context.Context, in *GetPlacesPerCityRequest, opts ...grpc.CallOption) (*GetAllAdsResponseList, error)
	GetUserPlaces(ctx context.Context, in *GetUserPlacesRequest, opts ...grpc.CallOption) (*GetAllAdsResponseList, error)
	DeleteAdImage(ctx context.Context, in *DeleteAdImageRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type adsClient struct {
	cc grpc.ClientConnInterface
}

func NewAdsClient(cc grpc.ClientConnInterface) AdsClient {
	return &adsClient{cc}
}

func (c *adsClient) GetAllPlaces(ctx context.Context, in *AdFilterRequest, opts ...grpc.CallOption) (*GetAllAdsResponseList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAdsResponseList)
	err := c.cc.Invoke(ctx, Ads_GetAllPlaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsClient) GetOnePlace(ctx context.Context, in *GetPlaceByIdRequest, opts ...grpc.CallOption) (*GetAllAdsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAdsResponse)
	err := c.cc.Invoke(ctx, Ads_GetOnePlace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsClient) CreatePlace(ctx context.Context, in *CreateAdRequest, opts ...grpc.CallOption) (*Ad, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ad)
	err := c.cc.Invoke(ctx, Ads_CreatePlace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsClient) UpdatePlace(ctx context.Context, in *UpdateAdRequest, opts ...grpc.CallOption) (*AdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdResponse)
	err := c.cc.Invoke(ctx, Ads_UpdatePlace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsClient) DeletePlace(ctx context.Context, in *DeletePlaceRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Ads_DeletePlace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsClient) GetPlacesPerCity(ctx context.Context, in *GetPlacesPerCityRequest, opts ...grpc.CallOption) (*GetAllAdsResponseList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAdsResponseList)
	err := c.cc.Invoke(ctx, Ads_GetPlacesPerCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsClient) GetUserPlaces(ctx context.Context, in *GetUserPlacesRequest, opts ...grpc.CallOption) (*GetAllAdsResponseList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAdsResponseList)
	err := c.cc.Invoke(ctx, Ads_GetUserPlaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsClient) DeleteAdImage(ctx context.Context, in *DeleteAdImageRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Ads_DeleteAdImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdsServer is the server API for Ads service.
// All implementations must embed UnimplementedAdsServer
// for forward compatibility.
type AdsServer interface {
	GetAllPlaces(context.Context, *AdFilterRequest) (*GetAllAdsResponseList, error)
	GetOnePlace(context.Context, *GetPlaceByIdRequest) (*GetAllAdsResponse, error)
	CreatePlace(context.Context, *CreateAdRequest) (*Ad, error)
	UpdatePlace(context.Context, *UpdateAdRequest) (*AdResponse, error)
	DeletePlace(context.Context, *DeletePlaceRequest) (*DeleteResponse, error)
	GetPlacesPerCity(context.Context, *GetPlacesPerCityRequest) (*GetAllAdsResponseList, error)
	GetUserPlaces(context.Context, *GetUserPlacesRequest) (*GetAllAdsResponseList, error)
	DeleteAdImage(context.Context, *DeleteAdImageRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedAdsServer()
}

// UnimplementedAdsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdsServer struct{}

func (UnimplementedAdsServer) GetAllPlaces(context.Context, *AdFilterRequest) (*GetAllAdsResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPlaces not implemented")
}
func (UnimplementedAdsServer) GetOnePlace(context.Context, *GetPlaceByIdRequest) (*GetAllAdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnePlace not implemented")
}
func (UnimplementedAdsServer) CreatePlace(context.Context, *CreateAdRequest) (*Ad, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlace not implemented")
}
func (UnimplementedAdsServer) UpdatePlace(context.Context, *UpdateAdRequest) (*AdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlace not implemented")
}
func (UnimplementedAdsServer) DeletePlace(context.Context, *DeletePlaceRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlace not implemented")
}
func (UnimplementedAdsServer) GetPlacesPerCity(context.Context, *GetPlacesPerCityRequest) (*GetAllAdsResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlacesPerCity not implemented")
}
func (UnimplementedAdsServer) GetUserPlaces(context.Context, *GetUserPlacesRequest) (*GetAllAdsResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPlaces not implemented")
}
func (UnimplementedAdsServer) DeleteAdImage(context.Context, *DeleteAdImageRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdImage not implemented")
}
func (UnimplementedAdsServer) mustEmbedUnimplementedAdsServer() {}
func (UnimplementedAdsServer) testEmbeddedByValue()             {}

// UnsafeAdsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdsServer will
// result in compilation errors.
type UnsafeAdsServer interface {
	mustEmbedUnimplementedAdsServer()
}

func RegisterAdsServer(s grpc.ServiceRegistrar, srv AdsServer) {
	// If the following call pancis, it indicates UnimplementedAdsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Ads_ServiceDesc, srv)
}

func _Ads_GetAllPlaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsServer).GetAllPlaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ads_GetAllPlaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsServer).GetAllPlaces(ctx, req.(*AdFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ads_GetOnePlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaceByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsServer).GetOnePlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ads_GetOnePlace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsServer).GetOnePlace(ctx, req.(*GetPlaceByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ads_CreatePlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsServer).CreatePlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ads_CreatePlace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsServer).CreatePlace(ctx, req.(*CreateAdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ads_UpdatePlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsServer).UpdatePlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ads_UpdatePlace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsServer).UpdatePlace(ctx, req.(*UpdateAdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ads_DeletePlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsServer).DeletePlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ads_DeletePlace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsServer).DeletePlace(ctx, req.(*DeletePlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ads_GetPlacesPerCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlacesPerCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsServer).GetPlacesPerCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ads_GetPlacesPerCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsServer).GetPlacesPerCity(ctx, req.(*GetPlacesPerCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ads_GetUserPlaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPlacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsServer).GetUserPlaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ads_GetUserPlaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsServer).GetUserPlaces(ctx, req.(*GetUserPlacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ads_DeleteAdImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsServer).DeleteAdImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ads_DeleteAdImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsServer).DeleteAdImage(ctx, req.(*DeleteAdImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ads_ServiceDesc is the grpc.ServiceDesc for Ads service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ads_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ads.Ads",
	HandlerType: (*AdsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllPlaces",
			Handler:    _Ads_GetAllPlaces_Handler,
		},
		{
			MethodName: "GetOnePlace",
			Handler:    _Ads_GetOnePlace_Handler,
		},
		{
			MethodName: "CreatePlace",
			Handler:    _Ads_CreatePlace_Handler,
		},
		{
			MethodName: "UpdatePlace",
			Handler:    _Ads_UpdatePlace_Handler,
		},
		{
			MethodName: "DeletePlace",
			Handler:    _Ads_DeletePlace_Handler,
		},
		{
			MethodName: "GetPlacesPerCity",
			Handler:    _Ads_GetPlacesPerCity_Handler,
		},
		{
			MethodName: "GetUserPlaces",
			Handler:    _Ads_GetUserPlaces_Handler,
		},
		{
			MethodName: "DeleteAdImage",
			Handler:    _Ads_DeleteAdImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ads.proto",
}
