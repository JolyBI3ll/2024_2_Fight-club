// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson66d84ff1Decode20242FIGHTCLUBDomain(in *jlexer.Lexer, out *OneCityResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "city":
			(out.City).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66d84ff1Encode20242FIGHTCLUBDomain(out *jwriter.Writer, in OneCityResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix[1:])
		(in.City).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OneCityResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66d84ff1Encode20242FIGHTCLUBDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OneCityResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66d84ff1Encode20242FIGHTCLUBDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OneCityResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66d84ff1Decode20242FIGHTCLUBDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OneCityResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66d84ff1Decode20242FIGHTCLUBDomain(l, v)
}
func easyjson66d84ff1Decode20242FIGHTCLUBDomain1(in *jlexer.Lexer, out *City) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "enTitle":
			out.EnTitle = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "image":
			out.Image = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66d84ff1Encode20242FIGHTCLUBDomain1(out *jwriter.Writer, in City) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"enTitle\":"
		out.RawString(prefix)
		out.String(string(in.EnTitle))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v City) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66d84ff1Encode20242FIGHTCLUBDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v City) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66d84ff1Encode20242FIGHTCLUBDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *City) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66d84ff1Decode20242FIGHTCLUBDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *City) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66d84ff1Decode20242FIGHTCLUBDomain1(l, v)
}
func easyjson66d84ff1Decode20242FIGHTCLUBDomain2(in *jlexer.Lexer, out *AllCitiesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cities":
			if in.IsNull() {
				in.Skip()
				out.Cities = nil
			} else {
				in.Delim('[')
				if out.Cities == nil {
					if !in.IsDelim(']') {
						out.Cities = make([]*City, 0, 8)
					} else {
						out.Cities = []*City{}
					}
				} else {
					out.Cities = (out.Cities)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *City
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(City)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Cities = append(out.Cities, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66d84ff1Encode20242FIGHTCLUBDomain2(out *jwriter.Writer, in AllCitiesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cities\":"
		out.RawString(prefix[1:])
		if in.Cities == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Cities {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllCitiesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66d84ff1Encode20242FIGHTCLUBDomain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AllCitiesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66d84ff1Encode20242FIGHTCLUBDomain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllCitiesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66d84ff1Decode20242FIGHTCLUBDomain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AllCitiesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66d84ff1Decode20242FIGHTCLUBDomain2(l, v)
}
