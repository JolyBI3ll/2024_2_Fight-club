// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9b8f5552Decode20242FIGHTCLUBDomain(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "senderId":
			out.SenderID = string(in.String())
		case "receiverId":
			out.ReceiverID = string(in.String())
		case "content":
			out.Content = string(in.String())
		case "createdAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552Encode20242FIGHTCLUBDomain(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"senderId\":"
		out.RawString(prefix)
		out.String(string(in.SenderID))
	}
	{
		const prefix string = ",\"receiverId\":"
		out.RawString(prefix)
		out.String(string(in.ReceiverID))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552Encode20242FIGHTCLUBDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552Encode20242FIGHTCLUBDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552Decode20242FIGHTCLUBDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552Decode20242FIGHTCLUBDomain(l, v)
}
func easyjson9b8f5552Decode20242FIGHTCLUBDomain1(in *jlexer.Lexer, out *Chat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lastMessage":
			out.LastMessage = string(in.String())
		case "lastDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastDate).UnmarshalJSON(data))
			}
		case "authorName":
			out.AuthorName = string(in.String())
		case "authorAvatar":
			out.AuthorAvatar = string(in.String())
		case "authorUuid":
			out.AuthorUUID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552Encode20242FIGHTCLUBDomain1(out *jwriter.Writer, in Chat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"lastMessage\":"
		out.RawString(prefix[1:])
		out.String(string(in.LastMessage))
	}
	{
		const prefix string = ",\"lastDate\":"
		out.RawString(prefix)
		out.Raw((in.LastDate).MarshalJSON())
	}
	{
		const prefix string = ",\"authorName\":"
		out.RawString(prefix)
		out.String(string(in.AuthorName))
	}
	{
		const prefix string = ",\"authorAvatar\":"
		out.RawString(prefix)
		out.String(string(in.AuthorAvatar))
	}
	{
		const prefix string = ",\"authorUuid\":"
		out.RawString(prefix)
		out.String(string(in.AuthorUUID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Chat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552Encode20242FIGHTCLUBDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Chat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552Encode20242FIGHTCLUBDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Chat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552Decode20242FIGHTCLUBDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Chat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552Decode20242FIGHTCLUBDomain1(l, v)
}
func easyjson9b8f5552Decode20242FIGHTCLUBDomain2(in *jlexer.Lexer, out *AllMessages) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat":
			if in.IsNull() {
				in.Skip()
				out.Chat = nil
			} else {
				in.Delim('[')
				if out.Chat == nil {
					if !in.IsDelim(']') {
						out.Chat = make([]*Message, 0, 8)
					} else {
						out.Chat = []*Message{}
					}
				} else {
					out.Chat = (out.Chat)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Message
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Message)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Chat = append(out.Chat, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552Encode20242FIGHTCLUBDomain2(out *jwriter.Writer, in AllMessages) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat\":"
		out.RawString(prefix[1:])
		if in.Chat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Chat {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllMessages) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552Encode20242FIGHTCLUBDomain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AllMessages) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552Encode20242FIGHTCLUBDomain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllMessages) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552Decode20242FIGHTCLUBDomain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AllMessages) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552Decode20242FIGHTCLUBDomain2(l, v)
}
func easyjson9b8f5552Decode20242FIGHTCLUBDomain3(in *jlexer.Lexer, out *AllChats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chats":
			if in.IsNull() {
				in.Skip()
				out.Chats = nil
			} else {
				in.Delim('[')
				if out.Chats == nil {
					if !in.IsDelim(']') {
						out.Chats = make([]*Chat, 0, 8)
					} else {
						out.Chats = []*Chat{}
					}
				} else {
					out.Chats = (out.Chats)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *Chat
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(Chat)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Chats = append(out.Chats, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552Encode20242FIGHTCLUBDomain3(out *jwriter.Writer, in AllChats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chats\":"
		out.RawString(prefix[1:])
		if in.Chats == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Chats {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllChats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552Encode20242FIGHTCLUBDomain3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AllChats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552Encode20242FIGHTCLUBDomain3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllChats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552Decode20242FIGHTCLUBDomain3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AllChats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552Decode20242FIGHTCLUBDomain3(l, v)
}
