services:
    certs:
        image: alpine:latest
        volumes:
            - .:/app
        entrypoint: "sh /app/ssl/generate-certs.sh"

    # Go migrator. It applies all needed migrations.
    migrator:
        image: rasulovarsen/migrator:latest
        environment:
            - DB_HOST=${DB_HOST}
            - DB_PORT=${DB_PORT}
            - DB_USER=${DB_USER}
            - DB_PASSWORD=${DB_PASS}
            - DB_NAME=${DB_NAME}
        depends_on:
            - postgres
        networks:
            - app-network

    # Go backend
    backend:
        image: rasulovarsen/backend:latest
        ports:
            - "8008:8008"
        environment:
            - DB_HOST=${DB_HOST}
            - DB_PORT=${DB_PORT}
            - DB_USER=${DB_USER}
            - DB_PASSWORD=${DB_PASS}
            - DB_NAME=${DB_NAME}
            - MINIO_HOST=minio
            - MINIO_PORT=${MINIO_PORT}
            - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
            - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
            - REDIS_HOST=redis
            - REDIS_PORT=6379
        depends_on:
            - postgres
            - minio
            - certs
            - redis
        networks:
            - app-network

    # PostgreSQL database
    postgres:
        image: postgres:17
        ports:
            - "8077:5432"
        environment:
            POSTGRES_USER: ${DB_USER}
            POSTGRES_PASSWORD: ${DB_PASS}
            POSTGRES_DB: ${DB_NAME}
        volumes:
            - postgres_data:/var/lib/postgresql/data
        networks:
            - app-network

    # Redis for caching
    redis:
        image: redis:7
        ports:
            - "6379:6379"
        networks:
            - app-network
    prometheus:
        image: prom/prometheus:latest
        container_name: prometheus
        ports:
            - "9090:9090"
        volumes:
            - ./prometheus.yml:/etc/prometheus/prometheus.yml
        restart: always
        networks:
            - app-network
    grafana:
        image: grafana/grafana:latest
        container_name: grafana
        ports:
            - "3000:3000"
        restart: always
        environment:
            - GF_SECURITY_ADMIN_USER=admin
            - GF_SECURITY_ADMIN_PASSWORD=admin
        volumes:
            - grafana-data:/var/lib/grafana
        networks:
            - app-network

    node_exporter:
        image: prom/node-exporter:latest
        container_name: node_exporter
        ports:
            - "9100:9100"
        restart: always
        networks:
            - app-network
    # MinIO for object storage
    minio:
        image: minio/minio
        ports:
            - "9000:9000"
            - "8070:9001"
        environment:
            MINIO_ROOT_USER: ${MINIO_ROOT_USER}
            MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
        command: server /data --console-address ":9001"
        volumes:
            - minio_data:/data
        networks:
            - app-network

    # MinIO Client for bucket creation
    minio-client:
        image: minio/mc
        depends_on:
            - minio
        entrypoint: >
            /bin/sh -c "
            sleep 5;
            /usr/bin/mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
            /usr/bin/mc mb --ignore-existing myminio/images;
            /usr/bin/mc anonymous set download myminio/images;
            /usr/bin/mc anonymous set download myminio/cities;
            "
        networks:
            - app-network

    # Ads service
    ads_service:
        image: rasulovarsen/ads_service:latest
        ports:
            - "50052:50052"
        depends_on:
            - redis
            - postgres
            - minio
        environment:
            - DB_HOST=${DB_HOST}
            - DB_PORT=${DB_PORT}
            - DB_USER=${DB_USER}
            - DB_PASSWORD=${DB_PASS}
            - DB_NAME=${DB_NAME}
            - REDIS_HOST=redis
            - REDIS_PORT=6379
        networks:
            - app-network

    # Auth service
    auth_service:
        image: rasulovarsen/auth_service:latest
        ports:
            - "50051:50051"
        depends_on:
            - redis
            - postgres
        environment:
            - DB_HOST=${DB_HOST}
            - DB_PORT=${DB_PORT}
            - DB_USER=${DB_USER}
            - DB_PASSWORD=${DB_PASS}
            - DB_NAME=${DB_NAME}
            - REDIS_HOST=redis
            - REDIS_PORT=6379
        networks:
            - app-network

    # City service
    city_service:
        image: rasulovarsen/city_service:latest
        ports:
            - "50053:50053"
        depends_on:
            - redis
            - postgres
            - minio
        environment:
            - DB_HOST=${DB_HOST}
            - DB_PORT=${DB_PORT}
            - DB_USER=${DB_USER}
            - DB_PASSWORD=${DB_PASS}
            - DB_NAME=${DB_NAME}
            - REDIS_HOST=redis
            - REDIS_PORT=6379
        networks:
            - app-network
    watchtower:
        image: containrrr/watchtower:latest
        container_name: watchtower
        environment:
            - WATCHTOWER_CLEANUP=true
            - WATCHTOWER_ROLLING_RESTART=true
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        restart: unless-stopped
        command: --interval 30

volumes:
    postgres_data:
    minio_data:
    grafana-data:

networks:
    app-network:
        driver: bridge
